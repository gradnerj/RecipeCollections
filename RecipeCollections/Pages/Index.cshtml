@page
@model IndexModel
@using System.Text.RegularExpressions
@{
    ViewData["Title"] = "Recipe Collection Landing Page";
}

<div class="text-center">
    <h1 class="display-4">Recipe Collection Site - Under Construction</h1>
    <form asp-page="./Index" method="get">
        <div class="form-actions">
            <input type="text" placeholder="Find by Title or Category" name="SearchString" value="@Model.CurrentFilter" />
            <input type="submit" value="Search" class="btn btn-primary" /> |
            <a asp-page="./Index">Back to full List</a>
        </div>
    </form>
    <table class="table">
        <thead>
            <tr>
                <th>
                    <a asp-page="./Index" asp-route-sortType="@Model.TitleSort" asp-route-currentFilter="@Model.CurrentFilter">
                        @Html.DisplayNameFor(model => model.Recipes[0].Title)
                    </a>
                </th>
                <th>
                    <a asp-page="./Index" asp-route-sortType="@Model.CategorySort" asp-route-currentFilter="@Model.CurrentFilter">
                        @Html.DisplayNameFor(model => model.Recipes[0].Category)
                    </a>
                </th>
                <th>
                    <a asp-page="./Index" asp-route-sortType="@Model.PrepTimeSort" asp-route-currentFilter="@Model.CurrentFilter">
                        @Html.DisplayNameFor(model => model.Recipes[0].PrepTime)
                    </a>
                </th>
                <th>
                    <a asp-page="./Index" asp-route-sortType="@Model.CookTimeSort" asp-route-currentFilter="@Model.CurrentFilter">
                        @Html.DisplayNameFor(model => model.Recipes[0].CookTime)
                    </a>
                </th>
                <th>
                    <a asp-page="./Index" asp-route-sortType="@Model.FeedsQtySort" asp-route-currentFilter="@Model.CurrentFilter">
                        @Html.DisplayNameFor(model => model.Recipes[0].FeedsQty)
                    </a>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Recipes[0].PhotoPath)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Recipes[0].Instructions)
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var r in Model.Recipes) {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => r.Title)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => r.Category)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => r.PrepTime)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => r.CookTime)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => r.FeedsQty)
                    </td>
                    <td>
                        <img src="@r.PhotoPath" class="img-thumbnail customImageSize" />
                    </td>
                    <td>
                        @{
                            if (r.Instructions.Contains("<ul>")) {
                                var itemCount = Regex.Matches(r.Instructions, "<li>").Count;
                                var parsedInstructions = r.Instructions.Replace("\n", "").Replace("\r", "");
                                parsedInstructions = parsedInstructions.Replace("<ul>", "");
                                parsedInstructions = parsedInstructions.Replace("</li></ul>", "");
                                parsedInstructions = parsedInstructions.Replace("<li>", "");
                                parsedInstructions = parsedInstructions.Replace("</li>", ".");
                                var listItems = parsedInstructions.Split('.');
                                <ul>
                                    @foreach (var l in listItems) {
                                        <li>
                                            @l
                                        </li>
                                    }
                                </ul>
                            } else if (r.Instructions.Contains("<ol>")) {
                                var itemCount = Regex.Matches(r.Instructions, "<li>").Count;
                                var parsedInstructions = r.Instructions.Replace("\n", "").Replace("\r", "");
                                parsedInstructions = parsedInstructions.Replace("<ol>", "");
                                parsedInstructions = parsedInstructions.Replace("</li></ol>", "");
                                parsedInstructions = parsedInstructions.Replace("<li>", "");
                                parsedInstructions = parsedInstructions.Replace("</li>", ".");
                                var listItems = parsedInstructions.Split('.');
                                <ol>
                                    @foreach (var l in listItems) {
                                        <li>
                                            @l
                                        </li>
                                    }
                                </ol>
                            } else {
                                Html.DisplayFor(modelItem => r.Instructions);
                            }
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @{
        var prevDisabled = !Model.Recipes.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Model.Recipes.HasNextPage ? "disabled" : "";
    }
    <a asp-page="./Index"
       asp-route-sortOrder="@Model.CurrentSort"
       asp-route-pageIndex="@(Model.Recipes.PageIndex - 1)"
       asp-route-currentFilter="@Model.CurrentFilter"
       class="btn btn-primary @prevDisabled">
        Previous
    </a>
    <a asp-page="./Index"
       asp-route-sortOrder="@Model.CurrentSort"
       asp-route-pageIndex="@(Model.Recipes.PageIndex + 1)"
       asp-route-currentFilter="@Model.CurrentFilter"
       class="btn btn-primary @nextDisabled">
        Next
    </a>
</div>
